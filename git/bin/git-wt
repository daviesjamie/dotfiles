#!/usr/bin/env bash

function usage {
    cat <<"EOF"
git-wt [-bdhv] <branch>

DESCRIPTION

    Helper tool to manage multiple working trees attached to the same
    repository with `git worktree`.

    This tool makes some assumptions about the way that git worktrees are being
    used:
        - The local repository is a bare repository, with a subdirectory in the
          root for each worktree.
        - Each worktree is named after the branch that it has checked out.

    With no optional flags, it creates a worktree named after the <branch> and
    checks out the <branch> into it, before then printing the path to that
    worktree. If the worktree already exists, it will only print the path to
    that worktree.

    If the -b flag is supplied, a new branch with the supplied <branch> name is
    created instead of checking out an already existing branch. HEAD is used as
    the base commit for the new branch.

    If the -d flag is supplied, both the worktree for <branch> and the local
    <branch> itself are deleted.

FLAGS

    -b: create a new branch
    -d: remove a worktree and the local branch
    -h: print this help
    -v: verbose mode

EOF
    exit 1
}

function cp_cow {
    if ! /bin/cp -Rc "$1" "$2"; then
        if ! /bin/cp -R --reflink "$1" "$2"; then
            if ! /bin/cp -R "$1" "$2"; then
                echo "Warning: Unable to copy $1 to $2" >&2
            fi
        fi
    fi
}

function _worktree {
    if [ -z "$1" ]; then
        usage
    fi

    if [ -n "$VERBOSE" ]; then
        set -x
    fi

    if [ -n "$CREATE_BRANCH" ] && [ -n "DELETE_BRANCH" ]; then
        echo "Error: Cannot create (-b) and delete (-d) a branch at the same time!" >&2
        exit 1
    fi

    branch_name="$1"
    repo_root=$(git rev-parse --show-cdup)

    if [ -n "$DELETE_BRANCH" ]; then
        worktree_path=$(git worktree list | grep -E "\[${branch_name}\]" | cut -d' ' -f1)

        if [ $(pwd) == $worktree_path ]; then
            echo "Error: Cannot remove the current worktree. Change directory and try again." >&2
            exit 1
        fi

        rm -rf "$worktree_path"
        git worktree prune
        git branch -D "$branch_name"
    fi


    # Replace slashes with underscores
    # jagd/feature-one => jagd_feature-one
    # hotfix-two       => hotfix-two
    dir_name=${branch_name//\//_}

    worktree_path="${repo_root}${dir_name}"

    if [ ! -d "$worktree_path" ]; then
        if [ -n "$CREATE_BRANCH" ]; then
            git worktree add -b "$branch_name" "$dir_name"
        else
            git worktree add "$branch_name" "$dir_name"
        fi
    fi

    main_worktree=$(git worktree list | grep -E '\[(main|master)\]' | cut -d' ' -f1)

    if [ ! -d "$main_worktree" ]; then
        echo "Warning: Unable to find default branch, not copying files" >&2
    else
        if [ -d "$main_worktree/node_modules" ]; then
            cp_cow node_modules "$worktree_path/node_modules"
        fi

        IFS=$'\n'
        files_to_copy=( $(find -E "$main_worktree" -not -path '*node_modules*' -and \
            -iregex '.*\/\.(env|env.local)') )
        for f in "${files_to_copy[@]}"; do
            filename=$(basename $f)
            cp_cow "$f" "$worktree_path/$filename"
        done
        unset IFS
    fi

    echo "$worktree_path"
}

while true; do
    case $1 in
        -b)
            CREATE_BRANCH=true
            shift
            ;;
        -d)
            DELETE_BRANCH=true
            shift
            ;;
        -h | --help)
            usage
            ;;
        -v | --verbose)
            VERBOSE=true
            shift
            ;;
        *)
            break
            ;;
    esac
done

_worktree "$@"
